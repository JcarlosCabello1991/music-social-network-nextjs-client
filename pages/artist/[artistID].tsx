import { Button } from '@mui/material';
import Image from 'next/image';
import PlayArrowIcon from '@mui/icons-material/PlayArrow';
import FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';
import Tooltip from '@mui/material/Tooltip';

import Layout from '../../components/Layout/Layout';
import TabPanel from '../../components/TabPanel/TabPanel';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useGetArtistDetailsQuery } from '../../redux/artistAPI';

import styles from './styles.module.css';
import { useGetUserQuery } from '../../redux/userAPI';
import FollowButton from '../../components/FollowButton/FollowButton';
import SkelettonButton from '../../components/SkelettonButton/SkelettonButton';
import { Artist } from '../../interfaces/ServerResponse';

type Props = {};

const ArtistDetails = (props: Props) => {

  const { query } = useRouter();
  const artistID = query.artistID?.toString() as string
  const userID = '63496653b32bbbe6521bec29'
  let isFollowed = undefined

  console.log(artistID)

  const {
    data: artist,
    isLoading,
    error,
  } = useGetArtistDetailsQuery(artistID);

  const {
    data: user,
    isSuccess
  } = useGetUserQuery(userID)

  if (isSuccess) {
    isFollowed = user.data.artists.some((item: Artist) => (item._id === artistID))
  }  

  return (
    <>
      <Head>
        <title>Artist Details</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className={styles.artist_details_container}>
          <div className={styles.artist_details}>
            <Image
              className={styles.artist_image}
              src={artist?.data.image}
              alt={artist?.data.name}
              width={200}
              height={200}
              layout="fixed"
            />
            <div className={styles.artist_information}>
              <p className={styles.type}>Artist</p>
              <h1 className={styles.artist_name}>{artist?.data.name}</h1>
              <div className={styles.artist_genres}>
                {artist?.data.genres.map((genre: string, index: number) => {
                  return (
                    <p key={index} className={styles.genre}>
                      {genre}
                    </p>
                  );
                })}
              </div>
              <Tooltip title="Add the artist to your library.">
              {isSuccess && artistID ? <FollowButton isFollowed={isFollowed} id={artistID} type='artist'/> :
                <SkelettonButton/>}
              </Tooltip>
            </div>
            <div className={styles.play_button_container}>
              <p className={styles.discography_info}>15 albums - 1080 tracks</p>
              <Button
                className={styles.play_button}
                variant="contained"
                color="inherit"
                startIcon={<PlayArrowIcon />}
              >
                Play
              </Button>
            </div>
          </div>
          <div className={styles.artist_discography_info}>
            <TabPanel data={artist?.data.tracks} />
          </div>
        </div>
      </Layout>
    </>
  );
};

export default ArtistDetails;
