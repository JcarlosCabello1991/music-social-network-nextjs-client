import Layout from "../../components/Layout/Layout";
import { useContext } from "react";
import styles from "./styles.module.css";
import Head from "next/head";
import { useRouter } from "next/router";
import { useGetPlaylistDetailsQuery } from "../../redux/playlistDetailsAPI";
import CreatePlaylist from "../../components/Playlist/CreatePlaylist";
import Searchbar from "../../components/Playlist/Searchbar/Searchbar";
import TrackList from "../../components/TrackList/TrackList";
import { useI18N } from "../../context/i18";
import { useEffect, useState } from "react";
import { useDebounce } from "usehooks-ts";
import { Track } from "../../interfaces/tracks";
import { useCookies } from "react-cookie";
import { countContext } from "../../context/countContext";

const Playlist = (tracks: any) => {
  const [cookies, setCookie, removeCookie] = useCookies([
    "userID",
    "userToken",
  ]);
  const BASE_URL_SPOTIFY = process.env.NEXT_PUBLIC_BACKEND_SPOTIFY_BACKEND;
  tracks = tracks.tracks;
  const { query } = useRouter();
  const { t } = useI18N();

  const {
    data: playlist,
    isLoading: isLoadingPlaylist,
    refetch,
    error: playlistError,
  } = useGetPlaylistDetailsQuery(
    { playlistID: query.playlistID, token: cookies.userToken },
    {
      refetchOnMountOrArgChange: true,
      refetchOnFocus: true,
    }
  );

  const [results, setResults] = useState([]);
  const [search, setSearch] = useState("");
  const debouncedValue = useDebounce<string>(search, 300);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.value.length > 0) {
      setSearch(e.target.value);
    } else {
      setSearch("");
      setResults([]);
    }
  };

  useEffect(() => {
    if (debouncedValue) {
      const results = tracks.filter((track: any) =>
        track.title
          .toLowerCase()
          .replace(/\s/g, "")
          .includes(debouncedValue.toLowerCase().replace(/\s/g, ""))
      );
      setResults(results);
    } else {
      setSearch("");
      setResults([]);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [debouncedValue]);

  const tracksExistInPlaylist = playlist?.data?.tracks?.length > 0;

  const [imagePlayList, setImagePlayList] = useState<string>(
    playlist?.data?.image
  );
  const [title, setTitle] = useState<string>(playlist?.data?.title);
  const [description, setDescription] = useState(playlist?.data?.description);
  const [change, setChange] = useState<boolean>(false);

  useEffect(() => {
    setTitle(playlist?.data?.title);
    setDescription(playlist?.data?.description);
    setImagePlayList(playlist?.data?.image);
  }, [playlist, change]);

  useEffect(() => {
    const getupdatedData = async () => {
      try{
        const response = await fetch(
          `${BASE_URL_SPOTIFY}/playlist/${query.playlistID}`,
          {
            method: "GET",
            headers: {
              Authorization: `Bearer ${cookies.userToken}`,
            },
          }
        );
        const data = await response.json();
        setImagePlayList(data?.data?.image);
        setDescription(data?.data?.description);
        setTitle(data?.data?.title);

      } catch(error) {
        console.error(error)
      }
    };
    getupdatedData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [change]);

  const playlistId = query.playlistID;

  const deleteTrackFromPlaylist = async (track: Track) => {
    try {
      const response = await fetch(
        `${BASE_URL_SPOTIFY}/playlist/tracks/${playlistId}`,
        {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json; charset=utf-8",
            Authorization: `bearer ${cookies.userToken}`,
          },
          body: JSON.stringify({
            tracks: track._id,
          }),
        }
      );
      if (response.ok) {
        refetch();
      }
    } catch (error) {
      console.log(error);
    }
  };

  const { userMessage } = useContext(countContext);

  return (
    <>
      <Head>
        <title>{`${t("additional").app_name} - ${t("additional").playlist} ${
          userMessage === 0 ? "" : `(${userMessage})`
        }`}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {change}
      <Layout>
        <CreatePlaylist
          playlistId={true}
          title={title}
          image={imagePlayList}
          setImagePlayList={setImagePlayList}
          setTitle={setTitle}
          setDescription={setDescription}
          change={change}
          setChange={setChange}
          description={description}
        />
        {tracksExistInPlaylist ? (
          <>
            <div className={styles.playlist_tracks} onClick={refetch}>
              <TrackList
                name={playlist?.data?.title}
                tracks={playlist?.data?.tracks}
                allowDelete={true}
                deleteTrackFromPlaylist={deleteTrackFromPlaylist}
              />
            </div>
            <Searchbar handleChange={handleChange} />
            {results.length && search !== " " ? (
              <div className={styles.search_results} onClick={refetch}>
                <TrackList
                  name={`${results.length} results for "${search}"`}
                  tracks={results}
                />
              </div>
            ) : search !== "" ? (
              <div className={styles.no_results}>
                <h3>No results found for &quot;{search}&quot;</h3>
              </div>
            ) : null}
          </>
        ) : (
          <>
            <Searchbar handleChange={handleChange} />
            {results.length && search !== " " ? (
              <div className={styles.search_results} onClick={refetch}>
                <TrackList
                  name={`${results.length} results for "${search}"`}
                  tracks={results}
                />
              </div>
            ) : search !== "" ? (
              <div className={styles.no_results}>
                <h3>No results found for &quot;{search}&quot;</h3>
              </div>
            ) : null}
          </>
        )}
      </Layout>
    </>
  );
};

export async function getServerSideProps() {
  const BASE_URL_SPOTIFY = process.env.NEXT_PUBLIC_BACKEND_SPOTIFY_BACKEND;
  const req = await fetch(`${BASE_URL_SPOTIFY}/track`);
  const data = await req.json();
  const res = data.data;

  return {
    props: {
      tracks: res,
    },
  };
}

export default Playlist;
